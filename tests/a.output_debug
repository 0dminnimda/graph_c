Welcome to example graph program!

> Debug mode: turned on

> DEBUG: Current graph state:
Graph(0 nodes, 0 edges):
edges:
nodes:

> DEBUG: Name: 'a', Index: 0

> WARNING: Node 'a' already exists
DEBUG: Name: 'a', Index: 0

> WARNING: Node 'a' already exists
DEBUG: Name: 'a', Index: 0

> DEBUG: Current graph state:
Graph(1 nodes, 0 edges):
edges:
nodes:
0  in:
0 out:

> DEBUG: Name: 'b', Index: 1

> WARNING: Node 'b' already exists
DEBUG: Name: 'b', Index: 1

> WARNING: Node 'b' already exists
DEBUG: Name: 'b', Index: 1

> DEBUG: Current graph state:
Graph(2 nodes, 0 edges):
edges:
nodes:
0  in:
0 out:
1  in:
1 out:

> ERROR: weight must be in range [0, 65535]

> ERROR: failed to parse weight '-65535' as a number

> DEBUG: Index1: 0, Index2: 1, Weight: 65535

> DEBUG: Current graph state:
Graph(2 nodes, 1 edges):
edges:
[0] = 0 -> 1 (65535)
nodes:
0  in:
0 out: [0] 1 (65535),
1  in: [0] 0 (65535),
1 out:

> DEBUG: Index1: 1, Index2: 0, Weight: 4

> DEBUG: Current graph state:
Graph(2 nodes, 2 edges):
edges:
[0] = 0 -> 1 (65535)
[1] = 1 -> 0 (4)
nodes:
0  in: [1] 1 (4),
0 out: [0] 1 (65535),
1  in: [0] 0 (65535),
1 out: [1] 0 (4),

> DEBUG: Index1: 0, Index2: 0, Weight: 9

> DEBUG: Current graph state:
Graph(2 nodes, 3 edges):
edges:
[0] = 0 -> 1 (65535)
[1] = 1 -> 0 (4)
[2] = 0 -> 0 (9)
nodes:
0  in: [1] 1 (4), [2] 0 (9),
0 out: [0] 1 (65535), [2] 0 (9),
1  in: [0] 0 (65535),
1 out: [1] 0 (4),

> DEBUG: Index1: 1, Index2: 1, Weight: 6

> DEBUG: Current graph state:
Graph(2 nodes, 4 edges):
edges:
[0] = 0 -> 1 (65535)
[1] = 1 -> 0 (4)
[2] = 0 -> 0 (9)
[3] = 1 -> 1 (6)
nodes:
0  in: [1] 1 (4), [2] 0 (9),
0 out: [0] 1 (65535), [2] 0 (9),
1  in: [0] 0 (65535), [3] 1 (6),
1 out: [1] 0 (4), [3] 1 (6),

> DEBUG: Index1: 0, Index2: 1

> DEBUG: Current graph state:
Graph(2 nodes, 3 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
[2] = 0 -> 0 (9)
nodes:
0  in: [1] 1 (4), [2] 0 (9),
0 out: [2] 0 (9),
1  in: [3] 1 (6),
1 out: [1] 0 (4), [3] 1 (6),

> DEBUG: Index1: 1, Index2: 1

> DEBUG: Current graph state:
Graph(2 nodes, 2 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
nodes:
0  in: [1] 1 (4), [2] 0 (9),
0 out: [2] 0 (9),
1  in:
1 out: [1] 0 (4),

> WARNING: edge between nodes 'a' and 'b' does not exist
DEBUG: Index1: 0, Index2: 1

> DEBUG: Current graph state:
Graph(2 nodes, 2 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
nodes:
0  in: [1] 1 (4), [2] 0 (9),
0 out: [2] 0 (9),
1  in:
1 out: [1] 0 (4),

> WARNING: edge between nodes 'b' and 'b' does not exist
DEBUG: Index1: 1, Index2: 1

> DEBUG: Current graph state:
Graph(2 nodes, 2 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
nodes:
0  in: [1] 1 (4), [2] 0 (9),
0 out: [2] 0 (9),
1  in:
1 out: [1] 0 (4),

> DEBUG: Index1: 0, Index2: 1, Weight: 655

> DEBUG: Current graph state:
Graph(2 nodes, 3 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
[2] = 0 -> 1 (655)
nodes:
0  in: [1] 1 (4), [2] 0 (655),
0 out: [2] 1 (655), [2] 1 (655),
1  in: [2] 0 (655),
1 out: [1] 0 (4),

> DEBUG: Index1: 0, Index2: 1

> DEBUG: Current graph state:
Graph(2 nodes, 2 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
nodes:
0  in: [1] 1 (4), [2] 0 (655),
0 out: [2] 1 (655),
1  in:
1 out: [1] 0 (4),

> WARNING: edge between nodes 'a' and 'b' already exists
DEBUG: Index1: 0, Index2: 1, Weight: 65

> DEBUG: Current graph state:
Graph(2 nodes, 2 edges):
edges:
[0] = 1 -> 1 (6)
[1] = 1 -> 0 (4)
nodes:
0  in: [1] 1 (4), [2] 0 (655),
0 out: [2] 1 (655),
1  in:
1 out: [1] 0 (4),

> main.out: src/graph.c:117: _Bool graph_del_edge(Graph *, u32, u32): Assertion `index == index2' failed.
